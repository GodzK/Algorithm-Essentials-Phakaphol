// üß© Longest Common Subsequence (LCS)
// -----------------------------------
// ‡πÇ‡∏à‡∏ó‡∏¢‡πå:
// ‡πÉ‡∏´‡πâ string 2 ‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô "ABCBDAB" ‡πÅ‡∏•‡∏∞ "BDCAB"
// ‡∏à‡∏á‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á subsequence ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô)
// ‡πÄ‡∏ä‡πà‡∏ô LCS ‡∏Ç‡∏≠‡∏á "ABCBDAB" ‡πÅ‡∏•‡∏∞ "BDCAB" ‡∏Ñ‡∏∑‡∏≠ "BCAB" ‚Üí ‡∏¢‡∏≤‡∏ß 4

function longestCommonSubsequence(str1, str2) {
    const m = str1.length;
    const n = str2.length;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á dp ‡∏Ç‡∏ô‡∏≤‡∏î (m+1) x (n+1) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0
    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));

    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á dp
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (str1[i - 1] === str2[j - 1]) {
                // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 1 ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (i-1, j-1)
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å max ‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πâ‡∏≤‡∏¢
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    // ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á LCS
    return dp[m][n];
}

// üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const str1 = "ABCBDAB";
const str2 = "BDCAB";
const lcsLength = longestCommonSubsequence(str1, str2);
console.log("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á LCS ‡∏Ñ‡∏∑‡∏≠:", lcsLength); // ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: 4
