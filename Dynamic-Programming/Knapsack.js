//Problem : // üéí 0/1 Knapsack Problem
// ---------------------------
// ‡πÇ‡∏à‡∏ó‡∏¢‡πå:
// ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á items ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡∏°‡∏µ "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å" ‡πÅ‡∏•‡∏∞ "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤" (value)
// ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏õ‡πâ (knapsack) ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î W ‡∏´‡∏ô‡πà‡∏ß‡∏¢
// ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ß‡πà‡∏≤ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å item ‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á (‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ö‡πà‡∏á) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
// ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á item ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï (items ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡∏°‡∏µ weight ‡πÅ‡∏•‡∏∞ value)
const weights = [2, 1, 3, 2]; // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ item
const values = [12, 10, 20, 15]; // ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ item
const capacity = 5; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ
const n = weights.length;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 0/1 Knapsack ‡∏î‡πâ‡∏ß‡∏¢ Dynamic Programming
function knapsack(values, weights, capacity) {
    const dp = Array(n + 1).fill(null).map(() => Array(capacity + 1).fill(0));

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á dp[i][w] = ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ item 0..i-1 ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ w
    for (let i = 1; i <= n; i++) {
        for (let w = 0; w <= capacity; w++) {
            if (weights[i - 1] <= w) {
                // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà item ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‚Üí ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤: ‡πÄ‡∏≠‡∏≤ vs ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤
                dp[i][w] = Math.max(
                    dp[i - 1][w], // ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ item ‡∏ô‡∏µ‡πâ
                    values[i - 1] + dp[i - 1][w - weights[i - 1]] // ‡πÄ‡∏≠‡∏≤ item ‡∏ô‡∏µ‡πâ
                );
            } else {
                // ‡πÉ‡∏™‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // ‡∏î‡∏∂‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    return dp[n][capacity];
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
const maxValue = knapsack(values, weights, capacity);
console.log("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡πÄ‡∏õ‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠:", maxValue);
