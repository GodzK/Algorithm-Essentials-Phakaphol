//GPS In Code !!!
//Shortest Path ‡∏Ñ‡∏∑‡∏≠ edge‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏≠‡πâ‡∏≠‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡πÄ‡∏ï‡πà‡∏Ç‡∏≠‡πÄ‡πÄ‡∏Ñ‡πà‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á edge‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤
//‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ Floyd-Warshall 
//‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ 
//1. ‡∏™‡∏£‡πâ‡∏≤‡∏á adjacency matrix ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å Node K ‡πÉ‡∏´‡πâloop ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà i j 


// Question: ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î (All Pairs)
// ‡πÉ‡∏ä‡πâ Floyd-Warshall Algorithm
function floydWarshall(graph) {
  const dist = [];
  const V = graph.length;

  // 1. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å graph
  for (let i = 0; i < V; i++) {
    dist[i] = [];
    for (let j = 0; j < V; j++) {
      dist[i][j] = graph[i][j];
    }
  }

  // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ dist ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏∏‡∏î‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á k
  for (let k = 0; k < V; k++) {
    for (let i = 0; i < V; i++) {
      for (let j = 0; j < V; j++) {
        if (dist[i][k] + dist[k][j] < dist[i][j]) {
          dist[i][j] = dist[i][k] + dist[k][j];
        }
      }
    }
  }

  return dist;
}

// üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const INF = Infinity;
const graphFW = [
  [0, 3, INF, 5],
  [2, 0, INF, 4],
  [INF, 1, 0, INF],
  [INF, INF, 2, 0]
];

console.log("Floyd-Warshall:");
console.log(floydWarshall(graphFW));
